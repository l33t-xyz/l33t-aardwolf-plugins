<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="l33t_utils_js"
   author="Ruhamah"
   id="1337fcd28fab4b2b93c9ace2"
   language="JScript"
   purpose="l33t convenience utilities written in JScript"
   save_state="y"
   date_written="2019-12-28 13:33:37"
   requires="4.76"
   version="0.06"
   >
<description trim="y">
<![CDATA[
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
l33t_utils_js (v0.06) by Ruhamah (https://aard.l33t.xyz)

l33t Utils is a bunch of convenience utilities and aliases.

Usage:

  l33t [js]utils [help]          - Displays help


  Repeaters
  =========

  cycle N command1[,command2[,command3[,command4,[...,commandN]]]]
                                 - Repeats a group of comma-separated
                                   commands N times

  Examples:
    cycle 20 hold trivia,gtrivia
    cycle 3 sit,stand,jump

  Nx <command>                   - Repeats a command N times, where N
                                   is any integer.

  Examples:
    3x clap
    5x give Ruhamah trivia


  Rate Limiters
  =============

  roomlimit N command            - Limits command to be run at most
                                   N times in the current room.
                                   Auto resets when moving rooms.

  Examples:
    roomlimit 2 c 'toxic cloud'

  groomlimit N command           - Limits command to be run at most
                                   N times in per room.
                                   Does not reset when moving rooms.
  groomlimit reset               - Resets global room limits.

  Examples:
    groomlimit 1 drop 1 gold


For other useful plugins, check out l33t Plugin Manager ('lpm').
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.js"/>

<!--  Triggers  -->

<triggers>
</triggers>

<!--  Aliases  -->

<aliases>

  <alias
   enabled="y"
   group="l33t"
   keep_evaluating="n"
   match="^cycle (\d+) (.*)$"
   name="cycle"
   regexp="y"
   script="cycle"
   sequence="5"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   keep_evaluating="n"
   match="^(\d+)x (.*)$"
   name="repeat"
   regexp="y"
   script="repeat"
   sequence="5"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   keep_evaluating="n"
   match="^roomlimit (\d+) (.*)$"
   name="room_limit"
   regexp="y"
   script="roomLimit"
   sequence="5"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   keep_evaluating="n"
   match="^groomlimit (\d+) (.*)$"
   name="groom_limit"
   regexp="y"
   script="gRoomLimit"
   sequence="5"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   keep_evaluating="n"
   match="^groomlimit reset"
   name="groom_limit_reset"
   regexp="y"
   script="gRoomLimitReset"
   sequence="5"
  >
  </alias>

  <!--  Plugin help  -->

  <alias
   enabled="y"
   group="l33t"
   match="l33t_utils_js:help"
   script="OnHelp"
   sequence="999"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   match="^l33t *(js)?utils.*$"
   regexp="y"
   sequence="999"
   script="OnHelp"
  >
  </alias>

</aliases>

<!--  Timers  -->

<timers>
</timers>

<!--  Variables  -->

<variables>
</variables>

<!--  Script  -->


<script>
<![CDATA[


// Globals


var PLUGIN_ID = GetPluginID();
var PLUGIN_NAME = GetPluginInfo(PLUGIN_ID, 1);
var PLUGIN_AUTHOR = GetPluginInfo(PLUGIN_ID, 2);
var PLUGIN_VERSION = GetPluginInfo(PLUGIN_ID, 19);
var PLUGIN_NUM_TRIGGERS = GetPluginInfo(PLUGIN_ID, 9);
var PLUGIN_NUM_ALIASES = GetPluginInfo(PLUGIN_ID, 10);
var PLUGIN_NUM_TIMERS = GetPluginInfo(PLUGIN_ID, 11);

var PLUGIN_URL = 'https://aard.l33t.xyz';

// Other plugins
var PLUGIN_ID_GMCP_HANDLER = '3e7dedbe37e44942dd46d264';
var PLUGIN_ID_DINV = '88c86ea252fc1918556df9fe';
var PLUGIN_ID_L33T_LUA_UTILS = '13376f198e8f442baa0be9a6';


// Core Functions


var prevRoomId = null;
var currentRoomId = null;
var currentRoomName = null;
var currentZone = null;

var ROOM_COMMAND_CACHE = {};
var GROOM_COMMAND_CACHE = {};


function handleGMCP(text) {
}


function handleL33tLuaUtilsUpdate(text) {
    if (text === 'room.updated') {
        prevRoomId = currentRoomId;
        currentRoomId = GetPluginVariable(PLUGIN_ID_L33T_LUA_UTILS, 'currentRoomId');
        currentRoomName = GetPluginVariable(PLUGIN_ID_L33T_LUA_UTILS, 'currentRoomName');
        currentZone = GetPluginVariable(PLUGIN_ID_L33T_LUA_UTILS, 'currentZone');
        //world.Note('Room updated - [' + currentRoomName + '] (' + currentRoomId + ') [' + currentZone + ']');

        if (prevRoomId != currentRoomId) {
            ROOM_COMMAND_CACHE = {};
        }
    }
}

function cycle(name, line, wildcards) {
    var n = parseInt(world.GetAliasWildcard(name, '1').trim()) || 1;
    var commandsStr = world.GetAliasWildcard(name, '2').trim();

    var parts = commandsStr.split(',');
    var commands = [];
    for (var i=0; i < parts.length; ++i) {
        var command = parts[i].trim();
        commands.push(command);
    }

    world.Note('Cycling commands [' + commands.join(', ') + '] x' + n);
    for (var i=0; i < n; ++i) {
        for (var j=0; j < commands.length; ++j) {
            var command = commands[j];
            world.Execute(command);
        }
    }
}


function repeat(name, line, wildcards) {
    var n = parseInt(world.GetAliasWildcard(name, '1'). trim());
    var command = world.GetAliasWildcard(name, '2').trim();
    world.Note('Repeating command [' + command + '] x' + n);

    for (var i=0; i < n; ++i) {
        world.Execute(command);
    }
}


function roomLimit(name, line, wildcards) {
    // USAGE:
    // roomlimit 2 c 'toxic cloud'

    var n = parseInt(world.GetAliasWildcard(name, '1').trim()) || 1;
    var command = world.GetAliasWildcard(name, '2').trim();

    if (ROOM_COMMAND_CACHE[command] === undefined) {
        ROOM_COMMAND_CACHE[command] = 0;
    }

    if (ROOM_COMMAND_CACHE[command] >= n) {
        world.Note('roomlimit NOOP - Already exceeded number of calls for [' + command + '] in room ' + currentRoomId + '.');
    } else {
        ++ROOM_COMMAND_CACHE[command];
        world.Execute(command);
    }
}


function gRoomLimit(name, line, wildcards) {
    // USAGE:
    // groomlimit 1 drop 1 gold

    var n = parseInt(world.GetAliasWildcard(name, '1').trim()) || 1;
    var command = world.GetAliasWildcard(name, '2').trim();

    if (GROOM_COMMAND_CACHE[currentRoomId] === undefined) {
        GROOM_COMMAND_CACHE[currentRoomId] = {};
    }

    if (GROOM_COMMAND_CACHE[currentRoomId][command] === undefined) {
        GROOM_COMMAND_CACHE[currentRoomId][command] = 0;
    }

    if (GROOM_COMMAND_CACHE[currentRoomId][command] >= n) {
        world.Note('groomlimit NOOP - Already exceeded number of calls for [' + command + '] in room ' + currentRoomId + '.');
    } else {
        ++GROOM_COMMAND_CACHE[currentRoomId][command];
        world.Execute(command);
    }
}


function gRoomLimitReset(name, line, wildcards) {
    world.Note('Reset groomlimit command cache.');
    GROOM_COMMAND_CACHE = {};
}


// Help


function OnHelp (sName, sLine, wildcards) {
    world.Note(world.GetPluginInfo(world.GetPluginID(), 3));
}


// Plugin Lifecycle


function OnPluginInstall() {
    printSeparator();
    world.ColourTell(
        'CornFlowerBlue', '', (
            'Loaded ' + PLUGIN_NAME
            + ' (v' + PLUGIN_VERSION + ')'
            + ' by ' + PLUGIN_AUTHOR
            + ' ('
        )
    );
    printPluginLink();
    world.ColourTell(
        'CornFlowerBlue', '', (
            ').\n'
            + 'Loaded '
            + PLUGIN_NUM_TRIGGERS + ' triggers, '
            + PLUGIN_NUM_ALIASES + ' aliases, '
            + PLUGIN_NUM_TIMERS + ' timers.\n\n'
        )
    );
    world.ColourTell('CornFlowerBlue', '', 'Type "');
    world.ColourTell('MediumSeaGreen', '', 'l33t utils help');
    world.ColourTell('CornFlowerBlue', '', '".\n');
    printSeparator();
}


function OnPluginSaveState() {
    // do nothing
}


function OnPluginBroadcast(msg, id, name, text) {
    if (id == PLUGIN_ID_GMCP_HANDLER) {
        //handleGMCP(text)
    } else if (id == PLUGIN_ID_L33T_LUA_UTILS) {
        handleL33tLuaUtilsUpdate(text);
    } else {
        // do nothing, unrecognized plugin
    }
}


// Util Functions


function printSeparator() {
    world.ColourTell(
        'CornFlowerBlue',
        '',
        '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'
    );
}


function printPluginLink() {
    world.Hyperlink(PLUGIN_URL, PLUGIN_URL, '', '', '', 1);
}


//------------------------------------------------------------------------------
// JS Utils
//------------------------------------------------------------------------------

if (!String.prototype.trim) {
    String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
}

function zfill(x, size) {
    var s = '' + x;
    while (s.length < size) {
        s = '0' + s;
    }
    return s;
}


]]>
</script>


</muclient>
