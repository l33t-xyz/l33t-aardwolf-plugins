<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="l33t_stopwatch"
   author="Ruhamah"
   id="1337200e0ba60e7ecbb9d220"
   language="Lua"
   purpose="Stopwatch tracks your leveling up, power up, and CP speeds."
   save_state="y"
   date_written="2019-12-17 01:33:37"
   requires="4.76"
   version="0.09"
   >
<description trim="y">
<![CDATA[
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
l33t_stopwatch (v0.08) by Ruhamah (https://aard.l33t.xyz)

l33t Stopwatch tracks your leveling up, power up, or campaign speed.

Future versions will also track GQ and quest times.

Usage:

  l33t stopwatch                 - Displays help
  l33t stopwatch channel <channel>
                                 - Sets the channel for reporting times. Defaults to 'say'. Also recommend using 'tracker'.
  l33t stopwatch level           - Displays stats for level ups.
  l33t stopwatch pup             - Displays stats for power ups.
  l33t stopwatch cp              - Displays stats for power ups.

  l33t stopwatch reset all       - Reset all stats.
  l33t stopwatch reset level     - Reset level stats.
  l33t stopwatch reset pup       - Reset pup stats.
  l33t stopwatch reset quest     - Reset quest stats.
  l33t stopwatch reset cp        - Reset campaign stats.
  l33t stopwatch reset gq        - Reset gquest stats.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>


  <trigger
   enabled="y"
   group="l33t"
   keep_evaluating="y"
   match="^You gain (?P<hit_points>\d+) hit points, (?P<mana>\d+) mana, (?P<moves>\d+) moves, (?P<practices>\d+) practices and (?P<trains>\d+) trains\.$"
   name="l33t_level_up"
   regexp="y"
   script="l33t_handle_level_up"
   sequence="1"
  >
  </trigger>


  <trigger
   enabled="y"
   group="l33t"
   keep_evaluating="y"
   match="^You gain (?P<hit_points>\d+) hit points, (?P<mana>\d+) mana, (?P<moves>\d+) moves, (?P<practices>\d+) practices, (?P<trains>\d+) trains and (?P<instinct_trains>\d+) instinct trains\.$"
   name="l33t_level_up_t9_redo"
   regexp="y"
   script="l33t_handle_level_up"
   sequence="1"
  >
  </trigger>


  <trigger
   enabled="y"
   group="l33t"
   keep_evaluating="y"
   lines_to_match="4"
   match="^Congratulations\, hero\. You have increased your powers\!\nYou gain (?P<trains>\d+) trains\.\n((Lucky\! You gain an extra (?P<luckytrains>\d+) training sessions?\!|You gain (?P<dailytrains1>\d+) extra trains? daily blessing bonus\.)|.*)\n(You gain (?P<dailytrains2>\d+) extra trains? daily blessing bonus\.|.*)\n\Z"
   multi_line="y"
   name="l33t_power_up"
   regexp="y"
   script="l33t_handle_power_up"
   sequence="2"
  >
  </trigger>

  <trigger
   enabled="y"
   group="l33t"
   keep_evaluating="y"
   lines_to_match="1"
   match="^(?<questor>.*) tells you \'I have selected (?<numTargets>\d+) targets for you to hunt, (?P<player>.*)\.\'$"
   multi_line="n"
   name="l33t_cp_start"
   regexp="y"
   script="l33t_handle_cp_start"
   sequence="4"
  >
  </trigger>

  <trigger
   enabled="y"
   group="l33t"
   keep_evaluating="y"
   lines_to_match="1"
   match="^CONGRATULATIONS! You have completed your campaign\.$"
   multi_line="n"
   name="l33t_cp_complete"
   regexp="y"
   script="l33t_handle_cp_complete"
   sequence="4"
  >
  </trigger>


</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   enabled="y"
   group="l33t"
   match="^ *l33t stopwatch channel *(?<channel>.*) *$"
   regexp="y"
   sequence="100"
   script="l33t_stopwatch_channel"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   match="^ *l33t stopwatch level *$"
   regexp="y"
   sequence="100"
   script="l33t_stopwatch_level"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   match="^ *l33t stopwatch *(?:(pup)|(powerup))$"
   regexp="y"
   sequence="100"
   script="l33t_stopwatch_powerup"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   match="^ *l33t stopwatch *(?:(cp)|(campaign))$"
   regexp="y"
   sequence="100"
   script="l33t_stopwatch_campaign"
  >
  </alias>

  <alias
   enabled="y"
   group="l33t"
   match="^ *l33t stopwatch reset *(?P<resetMode>(all)|(level)|(pup)|(quest)|(cp)|(gq)) *$"
   regexp="y"
   sequence="100"
   script="l33t_stopwatch_reset"
  >
  </alias>

  <!--  Plugin help  -->
  <alias
   enabled="y"
   group="l33t"
   match="l33t_stopwatch:help"
   script="OnHelp"
   sequence="999"
  >
  </alias>
  <alias
   enabled="y"
   group="l33t"
   match="^ *l33t stopwatch.*$"
   regexp="y"
   sequence="999"
   script="OnHelp"
  >
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[


-- Extensions


table.reduce = function (list, fn)
    local acc
    for k, v in ipairs(list) do
        if 1 == k then
            acc = v
        else
            acc = fn(acc, v)
        end
    end
    return acc
end


function sum(a, b)
    return a + b
end

-- Globals


PLUGIN_ID = GetPluginID()
PLUGIN_NAME = GetPluginInfo(PLUGIN_ID, 1)
PLUGIN_AUTHOR = GetPluginInfo(PLUGIN_ID, 2)
PLUGIN_VERSION = GetPluginInfo(PLUGIN_ID, 19)
PLUGIN_NUM_TRIGGERS = GetPluginInfo(PLUGIN_ID, 9)
PLUGIN_NUM_ALIASES = GetPluginInfo(PLUGIN_ID, 10)
PLUGIN_NUM_TIMERS = GetPluginInfo(PLUGIN_ID, 11)

PLUGIN_URL = 'https://aard.l33t.xyz'


-- Script Locals


local lastLevelUpTimestamp = nil
local levelUpDurations = {}
local totalLevelsGained = 0

local lastPowerUpTimestamp = nil
local powerUpDurations = {}
local powerUpTrains = {}
local totalPowerUpsGained = 0

local currentQuestStartTimestamp = nil
local questDurations = {}
local totalQuestsCompleted = 0

local currentCampaignStartTimestamp = nil
local campaignDurations = {}
local currentCampaignNumTargets = 0
local campaignNumTargets = {}
local totalCampaignsCompleted = 0

local currentGquestStartTimestamp = nil
local gquestDurations = {}
local totalGquestsCompleted = 0


-- Core Functions


function l33t_stopwatch_channel(name, line, wildcards)
    local inputChannel = GetAliasWildcard(name, 'channel')
    local savedChannel = GetVariable('stopwatch_channel')

    local channel = string.len(inputChannel) > 0 and inputChannel or savedChannel or 'say'

    SetVariable('stopwatch_channel', channel)

    if string.len(inputChannel) == 0 and savedChannel ~= nil then
        ColourTell(
            'CornFlowerBlue', '', 'l33t stopwatch channel is currently set to: ',
            'Yellow', '', channel,
            'CornFlowerBlue', '', '.\n'
        )
    else
        ColourTell(
            'CornFlowerBlue', '', 'Set l33t stopwatch channel to: ',
            'Yellow', '', channel,
            'CornFlowerBlue', '', '.\n'
        )
    end
end


function l33t_handle_level_up(name, line, wildcards)
    local timestamp = os.time()

    totalLevelsGained = totalLevelsGained + 1

    if lastLevelUpTimestamp ~= nil then
        local duration = timestamp - lastLevelUpTimestamp
        table.insert(levelUpDurations, duration)
    end

    lastLevelUpTimestamp = timestamp

    l33t_stopwatch_level()
end


function l33t_handle_power_up(name, line, wildcards)
    local timestamp = os.time()

    totalPowerUpsGained = totalPowerUpsGained + 1

    if lastPowerUpTimestamp ~= nil then
        local duration = timestamp - lastPowerUpTimestamp
        table.insert(powerUpDurations, duration)
    end

    local trains = tonumber(wildcards.trains) + (tonumber(wildcards.luckytrains) or 0)
                   + (tonumber(wildcards.dailytrains1) or 0) + (tonumber(wildcards.dailytrains2) or 0)
    table.insert(powerUpTrains, trains)

    lastPowerUpTimestamp = timestamp

    l33t_stopwatch_powerup()
end


function l33t_handle_cp_start(name, line, wildcards)
    local questor = GetTriggerWildcard(name, 'questor')
    local numTargets = tonumber(GetTriggerWildcard(name, 'numTargets'))
    local player = GetTriggerWildcard(name, 'player')

    local timestamp = os.time()

    currentCampaignStartTimestamp = timestamp
    currentCampaignNumTargets = numTargets
end


function l33t_handle_cp_complete(name, line, wildcards)
    local timestamp = os.time()

    totalCampaignsCompleted = totalCampaignsCompleted + 1

    if currentCampaignStartTimestamp ~= nil then
        local duration = timestamp - currentCampaignStartTimestamp
        table.insert(campaignDurations, duration)

        table.insert(campaignNumTargets, currentCampaignNumTargets)
    end

    currentCampaignStartTimestamp = nil
    currentCampaignNumTargets = 0

    l33t_stopwatch_campaign()
end


function l33t_stopwatch_level(name, line, wildcards)
    if lastLevelUpTimestamp == nil or totalLevelsGained < 2 or #levelUpDurations == 0 then
       Note('No level ups recorded yet. Level up ' .. math.max(2 - totalLevelsGained, 0) .. ' more time(s) to start timer.')
    else
        local lastLevelUpDuration = levelUpDurations[#levelUpDurations]
        local averageDuration = table.reduce(levelUpDurations, sum) / (totalLevelsGained - 1)

        local durationString = getDurationString(lastLevelUpDuration)
        local averageDurationString = getDurationString(averageDuration)

        local msg = (
            '@BLast Level-Up Duration@W: @C' .. durationString .. '@w'
            .. '. @BAverage Duration@W: @C' .. averageDurationString .. '@w'
            .. ' (over @C' .. totalLevelsGained .. '@w levels).'
        )

        local channel = GetVariable('stopwatch_channel') or 'say'
        SendNoEcho(channel .. ' ' .. msg)
    end
end


function l33t_stopwatch_powerup(name, line, wildcards)
    if lastPowerUpTimestamp == nil or totalPowerUpsGained < 2 or #powerUpDurations == 0 then
       Note('No power-ups recorded yet. Power up ' .. math.max(2 - totalPowerUpsGained, 0) .. ' more time(s) to start timer.')
    else
        local lastPowerUpDuration = powerUpDurations[#powerUpDurations]
        local averageDuration = table.reduce(powerUpDurations, sum) / (totalPowerUpsGained - 1)
        local totalTrains = table.reduce(powerUpTrains, sum)
        local averageTrains =  totalTrains / totalPowerUpsGained

        local durationString = getDurationString(lastPowerUpDuration)
        local averageDurationString = getDurationString(averageDuration)

        local msg = (
            '@BLast PUp @W: @C' .. durationString .. '@w'
            .. '. @BAverage@W: @C' .. averageDurationString .. '@w'
            .. ' @BTrains@W: @G' .. string.format('%.2f', averageTrains):gsub('0+$', ''):gsub("%.$","") .. '@w/PUp (@G' .. totalTrains .. '@w total)'
            .. ' (over @C' .. totalPowerUpsGained .. '@w PUps).'
        )

        local channel = GetVariable('stopwatch_channel') or 'say'
        SendNoEcho(channel .. ' ' .. msg)
    end
end


function l33t_stopwatch_campaign(name, line, wildcards)
    if #campaignDurations == 0 then
       Note('No campaigns recorded yet. Complete a campaign to start timer.')
    else
        local lastCampaignDuration = campaignDurations[#campaignDurations]
        local lastCampaignNumTargets = campaignNumTargets[#campaignNumTargets]
        local kpm = lastCampaignNumTargets / (lastCampaignDuration / 60)

        local averageDuration = table.reduce(campaignDurations, sum) / totalCampaignsCompleted
        local averageNumTargets = table.reduce(campaignNumTargets, sum) / totalCampaignsCompleted
        local averageKpm = averageNumTargets / (averageDuration / 60)

        local durationString = getDurationString(lastCampaignDuration)
        local averageDurationString = getDurationString(averageDuration)

        local msg = (
            '@BLast Campaign Duration@W: @C' .. durationString .. '@w (' .. lastCampaignNumTargets .. ' targets @@ ' .. string.format('%.2f', kpm):gsub('0+$', ''):gsub("%.$","") .. ' kpm)'
            .. '. @BAverage Duration@W: @C' .. averageDurationString .. '@w (Avg: ' .. string.format('%.2f', averageNumTargets):gsub('0+$', ''):gsub("%.$","") .. ' targets @@ ' .. string.format('%.2f', averageKpm):gsub('0+$', ''):gsub("%.$","") .. ' kpm)'
            .. ' (over @C' .. totalCampaignsCompleted .. '@w campaigns).'
        )

        local channel = GetVariable('stopwatch_channel') or 'say'
        SendNoEcho(channel .. ' ' .. msg)
    end
end


function l33t_stopwatch_reset(name, line, wildcards)
    local resetMode = GetAliasWildcard(name, 'resetMode')
    resetState(resetMode)
end

-- Helper Functions


function resetState(resetMode)
    Note('Resetting l33t stopwatch state: ' .. resetMode)

    if (resetMode == 'all' or resetMode == 'level') then
        lastLevelUpTimestamp = nil
        levelUpDurations = {}
        totalLevelsGained = 0
    end

    if (resetMode == 'all' or resetMode == 'pup') then
        lastPowerUpTimestamp = nil
        powerUpDurations = {}
        powerUpTrains = {}
        totalPowerUpsGained = 0
    end

    if (resetMode == 'all' or resetMode == 'quest') then
        currentQuestStartTimestamp = nil
        questDurations = {}
        totalQuestsCompleted = 0
    end

    if (resetMode == 'all' or resetMode == 'cp') then
        currentCampaignStartTimestamp = nil
        campaignDurations = {}
        currentCampaignNumTargets = 0
        campaignNumTargets = {}
        totalCampaignsCompleted = 0
    end

    if (resetMode == 'all' or resetMode == 'gq') then
        currentGquestStartTimestamp = nil
        gquestDurations = {}
        totalGquestsCompleted = 0
    end
end


-- Help


function OnHelp (sName, sLine, wildcards)
    Note(GetPluginInfo(GetPluginID(), 3))
end


-- Util Functions

function printSeparator()
    ColourTell(
        'CornFlowerBlue',
        '',
        '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'
    )
end


function printPluginLink()
    Hyperlink(PLUGIN_URL, PLUGIN_URL, '', '', '', 1)
end


function getDurationString(duration)
    local seconds = duration
    local hours = math.floor(seconds / 3600)
    seconds = seconds - (hours * 3600)
    local minutes = math.floor(seconds / 60)
    seconds = seconds - (minutes * 60)

    local durationString = ''
    if hours > 0 then
        durationString = durationString .. hours .. ' hours'
    end

    if minutes > 0 then
        if string.len(durationString) > 0 then
            durationString = durationString .. ', '
        end
        durationString = durationString .. minutes .. ' minutes'
    end

    if seconds > 0 then
        if string.len(durationString) > 0 then
            durationString = durationString .. ', '
        end
        durationString = durationString .. string.format('%.2f', seconds):gsub('0+$', ''):gsub("%.$","") .. ' seconds'
    end

    return durationString
end


function loaded()
    printSeparator()
    ColourTell(
        'CornFlowerBlue', '', (
            'Loaded ' .. PLUGIN_NAME
            .. ' (v' .. PLUGIN_VERSION .. ')'
            .. ' by ' .. PLUGIN_AUTHOR
            .. ' ('
        )
    )
    printPluginLink()
    ColourTell(
        'CornFlowerBlue', '', (
            ').\n'
            .. 'Loaded '
            .. PLUGIN_NUM_TRIGGERS .. ' triggers, '
            .. PLUGIN_NUM_ALIASES .. ' aliases, '
            .. PLUGIN_NUM_TIMERS .. ' timers.\n\n'
        ),
        'CornFlowerBlue', '', 'Type "',
        'MediumSeaGreen', '', 'l33t stopwatch help',
        'CornFlowerBlue', '', '".\n'
    )
    printSeparator()
end


loaded()


]]>
</script>


</muclient>
